syntax = "proto3";

service Master {
    rpc MapDone (Empty) returns (Response) {}
    rpc ReduceDone (Empty) returns (Response) {}
}

service Mapper {
    rpc Map (MapRequest) returns (Response) {}
    rpc GetPartition (PartitionRequest) returns (PartitionResponse) {}
    rpc Ping (Empty) returns (Response) {}
}

service Reducer {
    rpc Reduce (ReduceRequest) returns (Response) {}
    rpc GetCentroid (CentroidRequest) returns (CentroidResult) {}
    rpc Ping (Empty) returns (Response) {}
}

message Response {
    bool status = 1;
}

message MapRequest {
    int32 id = 1;
    int32 start = 2;
    int32 end = 3;
    int32 reducers = 4; // number of reducers
    repeated float centroids = 5; // list of current centroids
}

message PartitionRequest {
    int32 idx = 1; // which partition to get
}

message PartitionResponse {
    bytes data = 1; /* used pickle to serialize the data (too lazy to write 
    // custom data type for conversion between python data types and protobuf types)
    // It will be a dictionary of the form 
    // {k1: 
    //      [
                [p1, p2, ...], // point p for key k1 
                [q1, q2, ...], // point q for key k1
                ...
    // }
    // where point p is a numpy.ndarray 
    */
}

message ReduceRequest {
    int32 id = 1;
    int32 partition_idx = 2;
    int32 mappers = 3;
}

message CentroidRequest {
    int32 id = 1;
}

message CentroidResult {
    bool status = 1;
    bytes data = 2; /* Used for serialization of the result of the reduce operation
    // dictionary of the form 
    // {
    //    k1: v1, // key k1 and value v1
    //    k2: v2, // key k2 and value v2
    //    ...
    // }
    // k{i} is the index of centroid ranging from 0 to k-1 
    // and v{i} is the updated centroid as a numpy.ndarray
    */
}

message Empty {} // google.protobuf.Empty
